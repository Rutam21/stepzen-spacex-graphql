type Query {
  """
  fetch data from the table: "users"
  """
  users(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]
    """
    limit the nuber of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]
    """
    filter the rows returned
    """
    where: users_bool_exp
  ): [users!]!
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [users_select_column!]
    """
    limit the nuber of rows returned
    """
    limit: Int
    """
    skip the first n rows. Use only with order_by
    """
    offset: Int
    """
    sort the rows by one or more columns
    """
    order_by: [users_order_by!]
    """
    filter the rows returned
    """
    where: users_bool_exp
  ): users_aggregate!
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch data from the table: "users" using primary key columns
  """
  users_by_pk(id: uuid!): users
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all capsule information of type [Capsule] 
  """
  capsules(
    find: CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Capsule]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all capsule information of type [Capsule] that have launched
  """
  capsulesPast(
    find: CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Capsule]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all capsule information of type [Capsule] that have yet to launch
  """
  capsulesUpcoming(
    find: CapsulesFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Capsule]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch specific capsule information from table: Capsule with a given id 
  """
  capsule(id: ID!): Capsule
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch company information of type Info
  """
  company: Info
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all cores information of type [Core] 
  """
  cores(
    find: CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Core]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all cores information of type [Core] that have launched
  """
  coresPast(
    find: CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Core]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all cores information of type [Core] that have yet to launch
  """
  coresUpcoming(
    find: CoresFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Core]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information of a specific core from table: Core with a given id 
  """  
  core(id: ID!): Core
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all dragon capsules of type [Dragon] 
  """  
  dragons(limit: Int, offset: Int): [Dragon]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch a specific dragon capsule from table: Dragon with a given id 
  """   
  dragon(id: ID!): Dragon
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all historical events of type [History] 
  """
  histories(
    find: HistoryFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [History]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch historical events from table: HistoriesResults
  """
  historiesResult(
    find: HistoryFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): HistoriesResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch a specific historical event from table: History with a given id
  """
  history(id: ID!): History
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all landing pads of type [Landpad]
  """
  landpads(limit: Int, offset: Int): [Landpad]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch a specific landing pad from table: Landpad with a given id
  """
  landpad(id: ID!): Landpad
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all launches of type [Launch] 
  """
  launches(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Launch]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all launch information of type [Launch] that have launched
  """
  launchesPast(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Launch]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all past launch result information of table: LaunchesPastResult that have launched
  """
  launchesPastResult(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): LaunchesPastResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all launch information of type [Launch] that have yet to launch
  """
  launchesUpcoming(
    find: LaunchFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Launch]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch specific launch information from table: Launch with a given id
  """
  launch(id: ID!): Launch
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from the latest launch from table: Launch
  """
  launchLatest(offset: Int): Launch
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from the next upcoming launch from table: Launch
  """
  launchNext(offset: Int): Launch
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from all launchpads of type [Launchpad]
  """
  launchpads(limit: Int, offset: Int): [Launchpad]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch specific launchpad information from table: Launchpad with a given id
  """
  launchpad(id: ID!): Launchpad
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from all missions of type [Mission]
  """
  missions(find: MissionsFind, limit: Int, offset: Int): [Mission]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all missions result information of table: MissionResult that have launched
  """
  missionsResult(find: MissionsFind, limit: Int, offset: Int): MissionResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch specific mission information from table: Mission with a given id
  """
  mission(id: ID!): Mission
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from all payloads of type [Payload]
  """
  payloads(
    find: PayloadsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Payload]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from a specific payload from table: Payload with a given id
  """
  payload(id: ID!): Payload
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch current roadster data from table: Roadster with a given id 
  """
  roadster: Roadster
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from all rockets of type [Rocket]
  """
  rockets(limit: Int, offset: Int): [Rocket]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch all rocket result information of table: RocketsResult that have launched
  """
  rocketsResult(limit: Int, offset: Int): RocketsResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information from a specific rocket from table: Rocket with a given id
  """
  rocket(id: ID!): Rocket
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  fetch information of all ships of type [Ship] that assist launches
  """
  ships(
    find: ShipsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): [Ship]
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
  )
  """
  fetch all ship result information of table: ShipsResult that have assisted launches
  """
  shipsResult(
    find: ShipsFind
    limit: Int
    offset: Int
    order: String
    sort: String
  ): ShipsResult
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
   """
  fetch information from a specific ship from table: Ship with a given id
  """
  ship(id: ID!): Ship
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
}

"""
select columns of table "users"
"""
enum users_select_column {
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  rocket
  """
  column name
  """
  timestamp
  """
  column name
  """
  twitter
}

"""
ordering options when selecting data from "users"
"""
input users_order_by {
  id: order_by
  name: order_by
  rocket: order_by
  timestamp: order_by
  twitter: order_by
}

"""
column ordering options
"""
enum order_by {
  """
  in the ascending order, nulls last
  """
  asc
  """
  in the ascending order, nulls first
  """
  asc_nulls_first
  """
  in the ascending order, nulls last
  """
  asc_nulls_last
  """
  in the descending order, nulls first
  """
  desc
  """
  in the descending order, nulls first
  """
  desc_nulls_first
  """
  in the descending order, nulls last
  """
  desc_nulls_last
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp]
  _not: users_bool_exp
  _or: [users_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
  rocket: String_comparison_exp
  timestamp: timestamptz_comparison_exp
  twitter: String_comparison_exp
}

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
A scalar whose value is a generic Universally Unique Identifier, can represent any UUID version specified in RFC 4122.
"""
scalar uuid

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""
expression to compare columns of type timestamptz. All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
this scalar converts TIMESTAMP values from UTC to the client's session time zone
"""
scalar timestamptz

"""
columns and relationships of "users"
"""
type users {
  id: uuid!
  name: String
  rocket: String
  timestamp: timestamptz!
  twitter: String
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  count(columns: [users_select_column!], distinct: Boolean): Int
  max: users_max_fields
  min: users_min_fields
}

"""
aggregate max on columns
"""
type users_max_fields {
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
aggregate min on columns
"""
type users_min_fields {
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
input type CapsulesFind for fields for finding all capsule information
"""
input CapsulesFind {
  id: ID
  landings: Int
  mission: String
  original_launch: Date
  reuse_count: Int
  status: String
  type: String
}

"""
fields for all capsule information of type Capsule
"""
type Capsule {
  id: ID
  landings: Int
  missions: [CapsuleMission]
  original_launch: Date
  reuse_count: Int
  status: String
  type: String
  dragon: Dragon
}

"""
fields for missions of type CapsuleMission
"""
type CapsuleMission {
  flight: Int
  name: String
}

"""
fields for dragon capsules of type Dragon
"""
type Dragon {
  active: Boolean
  crew_capacity: Int
  description: String
  diameter: Distance
  dry_mass_kg: Int
  dry_mass_lb: Int
  first_flight: String
  heat_shield: DragonHeatShield
  height_w_trunk: Distance
  id: ID
  launch_payload_mass: Mass
  launch_payload_vol: Volume
  name: String
  orbit_duration_yr: Int
  pressurized_capsule: DragonPressurizedCapsule
  return_payload_mass: Mass
  return_payload_vol: Volume
  sidewall_angle_deg: Float
  thrusters: [DragonThrust]
  trunk: DragonTrunk
  type: String
  wikipedia: String
}

"""
fields for diameter and height_w_trunk, both of type Distance
"""
type Distance {
  feet: Float
  meters: Float
}

"""
fields for head_shield of type DragonHeatShield
"""
type DragonHeatShield {
  dev_partner: String
  material: String
  size_meters: Float
  temp_degrees: Int
}

"""
fields for various masses of type Mass
"""
type Mass {
  kg: Int
  lb: Int
}

"""
fields for various volumes of type Volume
"""
type Volume {
  cubic_feet: Int
  cubic_meters: Int
}

"""
field for pressurized_capsule of type DragonPressurizedCapsule
"""
type DragonPressurizedCapsule {
  payload_volume: Volume
}

"""
fields for thrusters of type DragonPressurizedCapsule
"""
type DragonThrust {
  amount: Int
  fuel_1: String
  fuel_2: String
  pods: Int
  thrust: Force
  type: String
}

"""
fields for various thrusts of type Force
"""
type Force {
  kN: Float
  lbf: Float
}

"""
fields for trunk of type DragonTrunk
"""
type DragonTrunk {
  cargo: DragonTrunkCargo
  trunk_volume: Volume
}

"""
fields for cargo of type DragonTrunkCargo
"""
type DragonTrunkCargo {
  solar_array: Int
  unpressurized_cargo: Boolean
}

"""
fields for company information of type Info
"""
type Info {
  ceo: String
  coo: String
  cto_propulsion: String
  cto: String
  employees: Int
  founded: Int
  founder: String
  headquarters: Address
  launch_sites: Int
  links: InfoLinks
  name: String
  summary: String
  test_sites: Int
  valuation: Float
  vehicles: Int
}

"""
fields for headquarters of type Address
"""
type Address {
  address: String
  city: String
  state: String
}

"""
fields for links of type InfoLinks
"""
type InfoLinks {
  elon_twitter: String
  flickr: String
  twitter: String
  website: String
}

"""
fields for finding all cores information of type CoresFind
"""
input CoresFind {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: String
  missions: String
  original_launch: Date
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

"""
fields for all core information of type Core
"""
type Core {
  asds_attempts: Int
  asds_landings: Int
  block: Int
  id: ID
  missions: [CapsuleMission]
  original_launch: Date
  reuse_count: Int
  rtls_attempts: Int
  rtls_landings: Int
  status: String
  water_landing: Boolean
}

"""
fields for find of input type HistoryFind
"""
input HistoryFind {
  end: Date
  flight_number: Int
  id: ID
  start: Date
}

"""
fields for all historical events data of type History
"""
type History {
  details: String
  event_date_unix: Date
  event_date_utc: Date
  id: ID
  links: Link
  title: String
  flight: Launch
}

"""
fields for links of type Link
"""
type Link {
  article: String
  reddit: String
  wikipedia: String
}

"""
fields for all launches and flight of type Launch
"""
type Launch {
  details: String
  id: ID
  is_tentative: Boolean
  launch_date_local: Date
  launch_date_unix: Date
  launch_date_utc: Date
  launch_site: LaunchSite
  launch_success: Boolean
  launch_year: String
  links: LaunchLinks
  mission_id: [String]
  mission_name: String
  rocket: LaunchRocket
  static_fire_date_unix: Date
  static_fire_date_utc: Date
  telemetry: LaunchTelemetry
  tentative_max_precision: String
  upcoming: Boolean
  ships: [Ship]
}

"""
fields for launch_site of type LaunchSite
"""
type LaunchSite {
  site_id: String
  site_name_long: String
  site_name: String
}

"""
fields for links of type LaunchLinks
"""
type LaunchLinks {
  article_link: String
  flickr_images: [String]
  mission_patch_small: String
  mission_patch: String
  presskit: String
  reddit_campaign: String
  reddit_launch: String
  reddit_media: String
  reddit_recovery: String
  video_link: String
  wikipedia: String
}

"""
fields for rocket of type LaunchRocket
"""
type LaunchRocket {
  fairings: LaunchRocketFairings
  first_stage: LaunchRocketFirstStage
  rocket_name: String
  rocket_type: String
  rocket: Rocket
  second_stage: LaunchRocketSecondStage
}

"""
fields for fairings of type LaunchRocketFairings
"""
type LaunchRocketFairings {
  recovered: Boolean
  recovery_attempt: Boolean
  reused: Boolean
  ship: String
}

"""
field for first_stage of type LaunchRocketFirstStage
"""
type LaunchRocketFirstStage {
  cores: [LaunchRocketFirstStageCore]
}

"""
fields for cores of type LaunchRocketFirstStageCore
"""
type LaunchRocketFirstStageCore {
  block: Int
  core: Core
  flight: Int
  gridfins: Boolean
  land_success: Boolean
  landing_intent: Boolean
  landing_type: String
  landing_vehicle: String
  legs: Boolean
  reused: Boolean
}

"""
fields for rocket, vehicles_launched, and data of type Rocket
"""
type Rocket {
  active: Boolean
  boosters: Int
  company: String
  cost_per_launch: Int
  country: String
  description: String
  diameter: Distance
  engines: RocketEngines
  first_flight: Date
  first_stage: RocketFirstStage
  height: Distance
  id: ID
  landing_legs: RocketLandingLegs
  mass: Mass
  name: String
  payload_weights: [RocketPayloadWeight]
  second_stage: RocketSecondStage
  stages: Int
  success_rate_pct: Int
  type: String
  wikipedia: String
}

"""
fields for engines of type RocketEngines
"""
type RocketEngines {
  number: Int
  type: String
  version: String
  layout: String
  engine_loss_max: String
  propellant_1: String
  propellant_2: String
  thrust_sea_level: Force
  thrust_vacuum: Force
  thrust_to_weight: Float
}

"""
fields for first_stage of type RocketFirstStage
"""
type RocketFirstStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  reusable: Boolean
  thrust_sea_level: Force
  thrust_vacuum: Force
}

"""
fields for landing_legs of type RocketLandingLegs
"""
type RocketLandingLegs {
  number: Int
  material: String
}

"""
fields for payload_weights of type RocketPayloadWeight
"""
type RocketPayloadWeight {
  id: String
  kg: Int
  lb: Int
  name: String
}

"""
fields for second_stage of type RocketSecondStage
"""
type RocketSecondStage {
  burn_time_sec: Int
  engines: Int
  fuel_amount_tons: Float
  payloads: RocketSecondStagePayloads
  thrust: Force
}

"""
fields for payloads of type RocketSecondStagePayloads
"""
type RocketSecondStagePayloads {
  option_1: String
  composite_fairing: RocketSecondStagePayloadCompositeFairing
}

"""
fields for composite_fairing of type RocketSecondStagePayloadCompositeFairing
"""
type RocketSecondStagePayloadCompositeFairing {
  height: Distance
  diameter: Distance
}

"""
field for second_stage of type LaunchRocketSecondStage
"""
type LaunchRocketSecondStage {
  block: Int
  payloads: [Payload]
}

"""
fields for type payloads of type Payload
"""
type Payload {
  customers: [String]
  id: ID
  manufacturer: String
  nationality: String
  norad_id: [Int]
  orbit_params: PayloadOrbitParams
  orbit: String
  payload_mass_kg: Float
  payload_mass_lbs: Float
  payload_type: String
  reused: Boolean
}

"""
fields for orbit_params of type PayloadOrbitParams
"""
type PayloadOrbitParams {
  apoapsis_km: Float
  arg_of_pericenter: Float
  eccentricity: Float
  epoch: Date
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  mean_anomaly: Float
  mean_motion: Float
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  semi_major_axis_km: Float
}

"""
field for telemetry of type LaunchTelemetry
"""
type LaunchTelemetry {
  flight_club: String
}

"""
fields for all ships that assist launches of type Ship
"""
type Ship {
  abs: Int
  active: Boolean
  attempted_landings: Int
  class: Int
  course_deg: Int
  home_port: String
  id: ID
  image: String
  imo: Int
  missions: [ShipMission]
  mmsi: Int
  model: String
  name: String
  position: ShipLocation
  roles: [String]
  speed_kn: Float
  status: String
  successful_landings: Int
  type: String
  url: String
  weight_kg: Int
  weight_lbs: Int
  year_built: Int
}

"""
fields for missions of type ShipMission
"""
type ShipMission {
  flight: String
  name: String
}

"""
fields for position of type ShipLocation
"""
type ShipLocation {
  latitude: Float
  longitude: Float
}

"""
fields for historical events of type HistoriesResult
"""
type HistoriesResult {
  result: Result
  data: [History]
}

"""
field for result of type Result
"""
type Result {
  totalCount: Int
}

"""
fields for all landing pads of type LandPad
"""
type Landpad {
  attempted_landings: String
  details: String
  full_name: String
  id: ID
  landing_type: String
  location: Location
  status: String
  successful_landings: String
  wikipedia: String
}

"""
fields for location of type Location
"""
type Location {
  latitude: Float
  longitude: Float
  name: String
  region: String
}

"""
fields for input type LaunchFind for finding information on all launches
"""
input LaunchFind {
  apoapsis_km: Float
  block: Int
  cap_serial: String
  capsule_reuse: String
  core_flight: Int
  core_reuse: String
  core_serial: String
  customer: String
  eccentricity: Float
  end: Date
  epoch: Date
  fairings_recovered: String
  fairings_recovery_attempt: String
  fairings_reuse: String
  fairings_reused: String
  fairings_ship: String
  gridfins: String
  id: ID
  inclination_deg: Float
  land_success: String
  landing_intent: String
  landing_type: String
  landing_vehicle: String
  launch_date_local: Date
  launch_date_utc: Date
  launch_success: String
  launch_year: String
  legs: String
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  mission_id: String
  mission_name: String
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: String
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: String
  rocket_id: String
  rocket_name: String
  rocket_type: String
  second_stage_block: String
  semi_major_axis_km: Float
  ship: String
  side_core1_reuse: String
  side_core2_reuse: String
  site_id: String
  site_name_long: String
  site_name: String
  start: Date
  tbd: String
  tentative_max_precision: String
  tentative: String
}

"""
fields for finding all past launch result information of type LaunchesPastResult
"""
type LaunchesPastResult {
  result: Result
  data: [Launch]
}

"""
fields for finding information from all launchpads of type Launchpad
"""
type Launchpad {
  attempted_launches: Int
  details: String
  id: ID
  location: Location
  name: String
  status: String
  successful_launches: Int
  vehicles_launched: [Rocket]
  wikipedia: String
}

input MissionsFind {
  id: ID
  manufacturer: String
  name: String
  payload_id: String
}

type Mission {
  description: String
  id: ID
  manufacturers: [String]
  name: String
  twitter: String
  website: String
  wikipedia: String
  payloads: [Payload]
}

type MissionResult {
  result: Result
  data: [Mission]
}

input PayloadsFind {
  apoapsis_km: Float
  customer: String
  eccentricity: Float
  epoch: Date
  inclination_deg: Float
  lifespan_years: Float
  longitude: Float
  manufacturer: String
  mean_motion: Float
  nationality: String
  norad_id: Int
  orbit: String
  payload_id: ID
  payload_type: String
  periapsis_km: Float
  period_min: Float
  raan: Float
  reference_system: String
  regime: String
  reused: Boolean
  semi_major_axis_km: Float
}

type Roadster {
  apoapsis_au: Float
  details: String
  earth_distance_km: Float
  earth_distance_mi: Float
  eccentricity: Float
  epoch_jd: Float
  inclination: Float
  launch_date_unix: Date
  launch_date_utc: Date
  launch_mass_kg: Int
  launch_mass_lbs: Int
  longitude: Float
  mars_distance_km: Float
  mars_distance_mi: Float
  name: String
  norad_id: Int
  orbit_type: Float
  periapsis_arg: Float
  periapsis_au: Float
  period_days: Float
  semi_major_axis_au: Float
  speed_kph: Float
  speed_mph: Float
  wikipedia: String
}

type RocketsResult {
  result: Result
  data: [Rocket]
}

input ShipsFind {
  id: ID
  name: String
  model: String
  type: String
  role: String
  active: Boolean
  imo: Int
  mmsi: Int
  abs: Int
  class: Int
  weight_lbs: Int
  weight_kg: Int
  year_built: Int
  home_port: String
  status: String
  speed_kn: Int
  course_deg: Int
  latitude: Float
  longitude: Float
  successful_landings: Int
  attempted_landings: Int
  mission: String
}

type ShipsResult {
  result: Result
  data: [Ship]
}

type Mutation {
  """
  delete data from the table: "users"
  """
  delete_users(
    """
    filter the rows which have to be deleted
    """
    where: users_bool_exp!
  ): users_mutation_response
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  insert data into the table: "users"
  """
  insert_users(
    """
    the rows to be inserted
    """
    objects: [users_insert_input!]!
    """
    on conflict condition
    """
    on_conflict: users_on_conflict
  ): users_mutation_response
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
  """
  update data of the table: "users"
  """
  update_users(
    """
    sets the columns of the filtered rows to the given values
    """
    _set: users_set_input
    """
    filter the rows which have to be updated
    """
    where: users_bool_exp!
  ): users_mutation_response
    @graphql(
      endpoint: "https://api.spacex.land/graphql/"
      prefix: { value: "", includeRootOperations: true }
    )
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """
  number of affected rows by the mutation
  """
  affected_rows: Int!
  """
  data of the affected rows by the mutation
  """
  returning: [users!]!
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  id: uuid
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]!
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint
  """
  users_pkey
}

"""
update columns of table "users"
"""
enum users_update_column {
  """
  column name
  """
  id
  """
  column name
  """
  name
  """
  column name
  """
  rocket
  """
  column name
  """
  timestamp
  """
  column name
  """
  twitter
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  id: uuid
  name: String
  rocket: String
  timestamp: timestamptz
  twitter: String
}

"""
conflict action
"""
enum conflict_action {
  """
  ignore the insert on this row
  """
  ignore
  """
  update the row with the given values
  """
  update
}

"""
order by aggregate values of table "users"
"""
input users_aggregate_order_by {
  count: order_by
  max: users_max_order_by
  min: users_min_order_by
}

"""
order by max() on columns of table "users"
"""
input users_max_order_by {
  name: order_by
  rocket: order_by
  timestamp: order_by
  twitter: order_by
}

"""
order by min() on columns of table "users"
"""
input users_min_order_by {
  name: order_by
  rocket: order_by
  timestamp: order_by
  twitter: order_by
}

"""
input type for inserting array relation for remote table "users"
"""
input users_arr_rel_insert_input {
  data: [users_insert_input!]!
  on_conflict: users_on_conflict
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!
  on_conflict: users_on_conflict
}

"""
scalar whose value conforms to the mongodb object id format
"""
scalar ObjectID

type CoreMission {
  name: String
  flight: Int
}
